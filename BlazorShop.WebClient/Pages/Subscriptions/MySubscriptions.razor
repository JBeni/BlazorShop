@*
  <copyright file="MySubscriptions.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/subscriptions"

@attribute [Authorize(Policy = StringRoleResources.Customer)]

@inject AuthenticationStateProvider AuthStateProvider
@inject ISubscriberService SubscriberService
@inject ISubscriptionService SubscriptionService
@inject IStripeService StripeService
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject HttpInterceptorService Interceptor

@using Variant = MudBlazor.Variant;

<main class="container">
    <div class="col-xxl-12 d-flex align-items-center p-3 my-3 text-white bg-purple shadow-lg p-3 bg-white rounded mb-5">
        <img class="me-3" src="images/subscriptions.png" alt="Subscriptions" width="58" height="38">
        <div class="col-xxl-12 lh-1">
            <h1 class="display-3 font-weight-bold mb-0 text-primary" style="margin-left: 10px;">My Subscriptions</h1>

            <h2 class="col-xxl-12 d-flex flex-row-reverse" style="margin-left: -75px; margin-top: -60px; border: none;">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save"
                    class="btn btn-lg btn-outline-primary"
                    @onclick="(() => ModalShow())"
                    Color="Color.Primary" ButtonType="MudBlazor.ButtonType.Button">
                        @Title Membership
                </MudButton>
            </h2>
        </div>
    </div>

    @if (showModal)
    {
        <div class="modal fade show" id="myModal" style="display:block; margin-top: 125px; margin-left: -100px;" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content" style="width: 900px;">
                    <div class="modal-header d-flex justify-content-center">
                        <h3 class="modal-title">@Title Music Membership</h3>
                    </div>

                    <div class="modal-body">
                        <h4 class="text-center align-items-center">What type of membership do you want to choose?</h4>

                        <div class="container py-3">
                            <main>
                                <div class="row row-cols-1 row-cols-md-3 mb-3 text-center">
                                    @if (subscriptions.Count == 0)
                                    {
                                        <div class="col" style="">
                                            <div class="card mb-4 rounded-3 shadow-sm">
                                                <div class="card-body">
                                                    <h4 class="card-title pricing-card-title">
                                                        No subscription found...
                                                    </h4>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @foreach (var subscription in subscriptions)
                                    {
                                        <div class="col" style="">
                                            <div class="card mb-4 rounded-3 shadow-sm">
                                                <div class="card-header py-3">
                                                    <h4 class="my-0 fw-normal">@subscription.Name</h4>
                                                </div>
                                                <div class="card-body">
                                                    <h1 class="card-title pricing-card-title">
                                                        <small class="text-muted fw-light">@subscription.CurrencySymbol @subscription.Price/@subscription.ChargeType</small>
                                                    </h1>
                                                    <ul class="list-unstyled mt-3 mb-4">
                                                        @foreach (var item in subscription.Options.Split(","))
                                                        {
                                                            <li>@item</li>                                                                
                                                        }
                                                    </ul>
                                                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Subscriptions"
                                                        Color="Color.Success"
                                                       @onclick="(async () => { await ActivateMembership(subscription); ModalOk(); })">
                                                            @Title @subscription.Name Plan
                                                    </MudButton>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (MembershipAccess > 0)
                                    {
                                        <div class="col-md-12">
                                            <h4>Your current pricing plan is: @subscriptionActive.SubscriptionName Subscription</h4>
                                        </div>
                                    }
                                </div>
                            </main>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel"
                            Color="Color.Warning" @onclick="@ModalCancel">
                                Cancel
                        </MudButton>
                    </div>
                </div>
            </div>
        </div>
    }

    <h4 class="display-6 fw-bold lh-1 mb-3 d-flex justify-content-start">Current Active Subscription</h4>
    @if (subscriptionActive.Id > 0)
    {
        <div class="container col-xxl-12 shadow-lg p-3 bg-white rounded mb-3">
            <div class="row flex-lg-row align-items-center">
                <div class="col-md-3">
                    <img src="images/@subscriptionActive.ImagePath" class="d-block img-fluid" alt="@subscriptionActive.ImageName" width="150" height="150" loading="lazy">
                </div>

                <div class="col-md-6" style="margin-left: -90px;">
                    <h4 class="display-6 fw-bold lh-1 mb-3">@subscriptionActive.SubscriptionName Subscription</h4>
                    <div class="col-md-10">
                        <p class="lead">Subscription Started: @subscriptionActive.DateStart.ToString("dd/MM/yyyy HH:mm tt")</p>
                    </div>
                    <div class="col-md-10">
                        <p class="lead">Subscription Period End: @subscriptionActive.CurrentPeriodEnd.ToString("dd/MM/yyyy HH:mm tt")</p>
                    </div>
                </div>

                <div class="col-md-3" style="margin-left: 50px;">
                    <div class="border-0">
                        <button class="btn btn-danger btn-lg" @onclick="(async () => { await CancelMembership(subscriptionActive.StripeSubscriberSubscriptionId); })">
                            Cancel
                        </button>
                        <a href="@subscriptionActive.HostedInvoiceUrl" target="_blank" class="btn btn-primary btn-lg" role="button">
                            View Receipt
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="container col-xxl-12 shadow-lg p-3 bg-white rounded mb-3">
            <div class="row flex-lg-row align-items-center">
                <div class="text-center">
                    <h4 class="display-6 fw-bold lh-1 mb-3">Currently, No Subscription is Activated</h4>
                </div>
            </div>
        </div>
    }

    <div class="row mt-4 mb-5">
        <div class="input-group col shadow-lg p-3 bg-white rounded">
            <MudTextField InputType="InputType.Text" class="form-control"
                Immediate="true" Variant="Variant.Outlined" Placeholder="Search subscription by name"
                @bind-Value="SearchString" OnKeyUp="FilterSubscriptions" />
            <div class="input-group-append" style="margin-left: 15px;">
                <button class="btn btn-primary btn-lg" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                    Reset Filter
                </button>
            </div>
        </div>
    </div>

    <h4 class="display-6 fw-bold lh-1 mb-3 d-flex justify-content-start">Inactive Subscriptions</h4>
    @if (subscriptionsInactive.Count > 0)
    {
        @foreach (var subscription in subscriptionsInactive)
        {
            <div class="container col-xxl-12 shadow-lg p-3 bg-white rounded mb-3">
                <div class="row flex-lg-row align-items-center">
                    <div class="col-md-3">
                        <img src="images/@subscription.ImagePath" class="d-block img-fluid" alt="@subscription.ImageName" width="150" height="150" loading="lazy">
                    </div>

                    <div class="col-md-6" style="margin-left: -90px;">
                        <h4 class="display-6 fw-bold lh-1 mb-3">@subscription.SubscriptionName Subscription</h4>
                        <div class="col-md-10">
                            <p class="lead">Subscription Started: @subscription.DateStart.ToString("dd/MM/yyyy HH:mm tt")</p>
                        </div>
                        <div class="col-md-10">
                            <p class="lead">Subscription Period End: @subscription.CurrentPeriodEnd.ToString("dd/MM/yyyy HH:mm tt")</p>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="border-0 d-flex flex-row-reverse">
                            <a href="@subscription.HostedInvoiceUrl" target="_blank" class="btn btn-primary btn-lg" role="button">
                                View Receipt
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="container col-xxl-12 shadow-lg p-3 bg-white rounded mb-3">
            <div class="row flex-lg-row align-items-center">
                <div class="text-center">
                    <h4 class="display-6 fw-bold lh-1 mb-3">The user does not have any past subscription.</h4>
                </div>
            </div>
        </div>
    }
</main>

@code {
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk() => showModal = false;

    private int MembershipAccess = 0;
    private string Title = "Activate";

    private int UserId { get; set; }
    private string? UserEmail { get; set; }

    private List<SubscriptionResponse> subscriptions = new();

    protected string? SearchString { get; set; } = string.Empty;
    private SubscriberResponse subscriptionActive = new();

    private List<SubscriberResponse> subscriptionsInactive = new();
    protected List<SubscriberResponse> searchSubscriptionsInactive = new();

    public void Dispose() => Interceptor.DisposeEvent();

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!user.Identity.IsAuthenticated) return;
        UserEmail = user?.Claims.FirstOrDefault(x => x.Type == StringRoleResources.EmailClaim).Value;
        UserId = int.Parse(user?.Claims.FirstOrDefault(x => x.Type == StringRoleResources.UserIdClaim).Value);

        await GetUserSubscriptions(UserId);
        await GetActveSubscription(UserId);
        await GetSubscriptions();
    }

    /// <summary>
    /// Getting the subscriptions.
    /// </summary>
    protected async Task GetSubscriptions()
    {
        subscriptions = await SubscriptionService.GetSubscriptions();
    }

    /// <summary>
    /// Get the active subscription.
    /// </summary>
    public async Task GetActveSubscription(int userId)
    {
        subscriptionActive = await SubscriberService.GetUserSubscriber(userId);
        if (DateTime.Now <= subscriptionActive.CurrentPeriodEnd && subscriptionActive.Id > 0)
        {
            MembershipAccess = subscriptionActive.SubscriptionId;
            Title = "Update";
        }
    }

    /// <summary>
    /// Cancel the membership.
    /// </summary>
    public async Task CancelMembership(string stripeSubscriptionCreationId)
    {
        await StripeService.CancelMembership(stripeSubscriptionCreationId);
        await GetUserSubscriptions(UserId);
        await GetActveSubscription(UserId);
        MembershipAccess = 0;
        Title = "Activate";
    }

    /// <summary>
    /// Get the user subscriptions.
    /// </summary>
    public async Task GetUserSubscriptions(int userId)
    {
        subscriptionsInactive = await SubscriberService.GetUserAllSubscribers(userId);
        searchSubscriptionsInactive = subscriptionsInactive;
    }

    /// <summary>
    /// Activate the membership.
    /// </summary>
    private async Task ActivateMembership(SubscriptionResponse subscription)
    {
        var subscriberObj = new SubscriberResponse
        {
            DateStart = DateTime.Now,
            CurrentPeriodEnd = DateTime.Now.AddDays(30),
            CustomerId = UserId,
            SubscriptionId = subscription.Id,
            StripeSubscriptionId = subscription.StripeSubscriptionId
        };
        await SubscriberService.AddSubscriber(subscriberObj);

        if (MembershipAccess == 0)
        {
            var response = await HttpClient.PostAsJsonAsync("Payments/create-subscription", subscriberObj);
            var subscriptionCheckoutUrl = await response.Content.ReadAsStringAsync();
            NavManager.NavigateTo(subscriptionCheckoutUrl, forceLoad: true);
        }
        else
        {
            subscriberObj.Id = 1;
            subscriberObj.StripeSubscriberSubscriptionId = subscriptionActive.StripeSubscriberSubscriptionId;

            var response = await HttpClient.PostAsJsonAsync("Payments/update-subscription", subscriberObj);
            var subscriptionCheckoutUrl = await response.Content.ReadAsStringAsync();
            NavManager.NavigateTo(subscriptionCheckoutUrl, forceLoad: true);
        }
    }

    /// <summary>
    /// Filter the subscriptions.
    /// </summary>
    protected void FilterSubscriptions()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            subscriptionsInactive = searchSubscriptionsInactive.Where(x => x.SubscriptionName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            subscriptionsInactive = searchSubscriptionsInactive;
        }
    }

    /// <summary>
    /// Reset the search filter.
    /// </summary>
    public void ResetSearch()
    {
        SearchString = string.Empty;
        subscriptionsInactive = searchSubscriptionsInactive;
    }
}
