@*
  <copyright file="MyOrders.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/orders"

@attribute [Authorize(Policy = StringRoleResources.Customer)]

@inject AuthenticationStateProvider AuthStateProvider
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject HttpInterceptorService Interceptor

@using Variant = MudBlazor.Variant;

<main class="container">
    <div class="d-flex align-items-center p-3 my-3 text-white bg-purple shadow-lg p-3 bg-white rounded">
        <img class="me-3" src="images/orders.png" alt="orders" width="58" height="38">
        <div class="lh-1">
            <h1 class="display-3 font-weight-bold mb-0 text-primary" style="margin-left: 30px;">My Orders</h1>
        </div>
    </div>

    <div class="row">
        <div class="input-group col shadow-lg p-3 bg-white rounded mb-5">
            <MudTextField InputType="InputType.Text" class="form-control"
                Immediate="true" Variant="Variant.Outlined" Placeholder="Search order by name"
                @bind-Value="SearchString" OnKeyUp="FilterOrders" />
            <div class="input-group-append" style="margin-left: 15px;">
                <MudButton class="btn btn-primary btn-lg mt-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Clear"
                    Color="Color.Success" @onclick="ResetSearch">
                    Reset Filter
                </MudButton>
            </div>
        </div>
    </div>

    @if (ordersList is null)
    {
        <div class="d-flex justify-content-center" style="margin-top: 100px;">
            <h4 style="font-size: 45px;"><em>Loading the data...</em></h4>
        </div>
    }
    else
    {
        @if (ordersList.Count > 0)
        {
            @foreach (var order in ordersList)
            {
                <div class="container col-xxl-12 shadow-lg p-3 bg-white rounded mb-3">
                    <div class="row flex-lg-row align-items-center">
                        <div class="col-md-3">
                            <img src="images/order.jpg" class="d-block img-fluid" alt="Order Image" width="150" height="150" loading="lazy">
                        </div>

                        <div class="col-md-6" style="margin-left: -90px;">
                            <h5 class="display-8 fw-bold lh-1 mb-3">@order.OrderName</h5>
                            <div class="col-md-10">
                                <p class="lead">@order.OrderDate.ToString("dd/MM/yyyy HH:mm tt")</p>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="border-0 d-flex flex-row-reverse">
                                <MudButton class="btn btn-primary btn-lg" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ViewHeadline"
                                    Color="Color.Success" @onclick="(() => ViewOrder(order.Id))">
                                    View Order
                                </MudButton>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="container col-xxl-12 shadow-lg p-3 bg-white rounded mb-3">
                <div class="row flex-lg-row align-items-center">
                    <div class="text-center">
                        <h4 class="display-6 fw-bold lh-1 mb-3">No record found...</h4>
                    </div>
                </div>
            </div>
        }
    }
</main>

@code {
    private List<OrderResponse> ordersList { get; set; }
    protected List<OrderResponse> searchOrdersData { get; set; }

    protected string SearchString { get; set; } = string.Empty;
    private string userEmail { get; set; }
    private int userId { get; set; }

    public void Dispose() => Interceptor.DisposeEvent();

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!user.Identity.IsAuthenticated) return;
        userId = int.Parse(user.Claims.FirstOrDefault(x => x.Type == StringRoleResources.UserIdClaim).Value);
        userEmail = user.Claims.FirstOrDefault(x => x.Type == StringRoleResources.EmailClaim).Value;

        await GetOrders(userEmail);
    }

    /// <summary>
    /// Get the orders.
    /// </summary>
    public async Task GetOrders(string userEmail)
    {
        ordersList = await OrderService.GetOrders(userEmail);
        searchOrdersData = ordersList;
    }

    /// <summary>
    /// View the order details.
    /// </summary>
    private void ViewOrder(int id)
    {
        NavigationManager.NavigateTo($"/orders/view/{id}");
    }

    /// <summary>
    /// Filter the orders.
    /// </summary>
    protected void FilterOrders()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            ordersList = searchOrdersData.Where(x => x.OrderName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            ordersList = searchOrdersData;
        }
    }

    /// <summary>
    /// Reset the search filter.
    /// </summary>
    public void ResetSearch()
    {
        SearchString = string.Empty;
        ordersList = searchOrdersData;
    }
}
