@*
  <copyright file="VerifyAuth.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/verifyauth"

@attribute [Authorize(Policy = StringRoleResources.Admin)]

<h3>Verify Auth</h3>

@if (isAuthenticated)
{
    <h4>@userName is authenticated</h4>
    <ul>
        <li>Access to Admin Role: @isAdminRole</li>
        <li>Access to Cashier Role: @isUserRole</li>
        <li>Access to Manager Role: @isDefaultRole</li>

        <li></li>
        <li>Access to Admin Claim: @isAdminClaim</li>
        <li>Access to Default Claim: @isUserClaim</li>
        <li>Access to User Claim: @isDefaultClaim</li>
    </ul>
}
else
{
    <h4>The user is not authenticated</h4>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private bool isAuthenticated = false;
    private string userName;

    private bool isAdminRole = false;
    private bool isUserRole = false;
    private bool isDefaultRole = false;

    private bool isUser = false;

    private bool isAdminClaim = false;
    private bool isUserClaim = false;
    private bool isDefaultClaim = false;

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (authState.User.Identity.IsAuthenticated)
        {
            isAuthenticated = true;
            userName = authState.User.FindFirst(x => x.Type == StringRoleResources.NameClaim || x.Type == StringRoleResources.NameClaimSecond).Value;

            isAdminRole = authState.User.IsInRole(StringRoleResources.Admin);
            isUserRole = authState.User.IsInRole(StringRoleResources.User);
            isDefaultRole = authState.User.IsInRole(StringRoleResources.Default);

            isUser = authState.User.HasClaim(x => x.Type == StringRoleResources.RoleClaim && x.Value == StringRoleResources.Admin);

            isAdminClaim = authState.User.HasClaim(x => x.Type == StringRoleResources.RoleClaim && x.Value == StringRoleResources.Admin);
            isUserClaim = authState.User.HasClaim(x => x.Type == StringRoleResources.RoleClaim && x.Value == StringRoleResources.User);
            isDefaultClaim = authState.User.HasClaim(x => x.Type == StringRoleResources.RoleClaim && x.Value == StringRoleResources.Default);

            var userClaims = authState.User.Claims;
            var username = authState.User.Identity.Name;
        }
    }
}
