@*
  <copyright file="Subscribers.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/admin/subscribers"

@attribute [Authorize(Policy = StringRoleResources.Admin)]

@inject ISubscriberService SubscriberService
@inject NavigationManager NavManager
@inject HttpInterceptorService Interceptor

@using Variant = MudBlazor.Variant;

<h3>Subscribers</h3>

@if (subscribersList is null)
{
    <div class="d-flex justify-content-center" style="margin-top: 100px;">
        <h4 style="font-size: 45px;"><em>Loading the data...</em></h4>
    </div>
}
else
{
    @if (subscribersList.Count > 0)
    {
        <MatTable Items="@subscribersList" LoadInitialData="true" Striped="true" AllowSelection="true"
            RowClass="tester" FilterByColumnName="CustomerName" DebounceMilliseconds="150" class="mat-elevation-z5">
            <MatTableHeader>
                <th class="col-md-1">Id</th>
                <th class="col-md-3">Status</th>
                <th class="col-md-3">DateStart</th>
                <th class="col-md-3">CurrentPeriodEnd</th>
                <th class="col-md-3">Customer</th>
                <th class="col-md-3">Subscription</th>
                <th class="col-md-4">Actions</th>
            </MatTableHeader>

            <MatTableRow>
                <td class="col-md-1">@String.Format("{0:d}", @context.Id)</td>
                <td class="col-md-3">@context.Status</td>
                <td class="col-md-3">@context.DateStart</td>
                <td class="col-md-3">@context.CurrentPeriodEnd</td>
                <td class="col-md-3">@context.CustomerName</td>
                <td class="col-md-3">@context.SubscriptionName</td>
                <td class="col-md-4">
                    <MudButton Disabled Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete"
                        Color="Color.Error" @onclick="(() => { DeleteConfirm(context.Id); ModalShow(); })">
                        Delete
                    </MudButton>
                </td>
            </MatTableRow>
        </MatTable>

        @if (showModal)
        {
            <div class="modal fade show" id="myModal" style="display:block; margin-top: 150px;" aria-modal="true" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Delete Subscriber</h3>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Close"
                                Color="Color.Warning" @onclick="@ModalCancel"
                                data-bs-dismiss="modal" aria-label="Close">
                                Close
                            </MudButton>
                        </div>
                        <div class="modal-body">
                            <h4>Do you want to delete this subscriber?</h4>
                        </div>
                        <div class="modal-footer">
                            <MudButton class="mr-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete"
                                Color="Color.Error" @onclick="(async () => { await DeleteSubscriber(subscriber.Id); ModalOk(); })">
                                Delete
                            </MudButton>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel"
                                Color="Color.Warning" @onclick="@ModalCancel">
                                Cancel
                            </MudButton>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="d-flex justify-content-center" style="margin-top: 150px;">
            <h4 style="font-size: 45px;">No record found</h4>
        </div>
    }
}

@code {
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk() => showModal = false;

    protected SubscriberResponse subscriber = new();
    protected List<SubscriberResponse> subscribersList { get; set; }

    public void Dispose() => Interceptor.DisposeEvent();

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        await GetSubscribers();
    }

    /// <summary>
    /// Get the subscribers.
    /// </summary>
    protected async Task GetSubscribers()
    {
        subscribersList = await SubscriberService.GetSubscribers();
    }

    /// <summary>
    /// Confirm the delete operation.
    /// </summary>
    protected void DeleteConfirm(int Id)
    {
        subscriber = subscribersList.FirstOrDefault(x => x.Id == Id);
    }

    /// <summary>
    /// Delete the subscribers.
    /// </summary>
    protected async Task DeleteSubscriber(int Id)
    {
        await SubscriberService.DeleteSubscriber(Id);
        await GetSubscribers();
    }
}

<style>
    label {
        width: 70%;
    }
</style>
