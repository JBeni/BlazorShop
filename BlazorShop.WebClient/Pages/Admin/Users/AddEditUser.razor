@*
  <copyright file="AddEditUser.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/admin/users/add"
@page "/admin/users/edit/{Id:int}"

@attribute [Authorize(Policy = StringRoleResources.Admin)]

@inject IUserService UserService
@inject IRoleService RoleService
@inject NavigationManager NavManager
@inject HttpInterceptorService Interceptor

@using Variant = MudBlazor.Variant;

<h1>@Title User</h1>
<hr />

<EditForm Model="@User" OnValidSubmit="SaveUser">
    <FluentValidationValidator />

    <div class="mb-3">
        <div class="col-md-4">
            <MudTextField InputType="InputType.Text" class="form-control"
                For="@(() => User.FirstName)"
                @bind-Value="User.FirstName" Label="FirstName" Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>
    <div class="mb-3">
        <div class="col-md-4">
            <MudTextField InputType="InputType.Text" class="form-control"
                For="@(() => User.LastName)"
                @bind-Value="User.LastName" Label="LastName" Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>
    <div class="mb-3">
        <div class="col-md-4">
            <MudTextField InputType="InputType.Email" class="form-control"
                For="@(() => User.Email)"
                @bind-Value="User.Email" Label="LastName" Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>
    <div class="mb-3">
        <div class="col-md-4">
            <MudSelect T="string" InputType="InputType.Text" @bind-Value="@User.RoleName"
                For="@(() => User.RoleName)"
                Placeholder="Select Role Name" Label="Role Name" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var role in roles)
                    {
                        <MudSelectItem Value="@role.Name">@role.Name</MudSelectItem>
                    }
            </MudSelect>
        </div>
    </div>

    <div class="form-group">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" ButtonType="MudBlazor.ButtonType.Submit">
            Save
        </MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" @onclick="Cancel">
            Cancel
        </MudButton>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Add";

    public UserResponse User = new();
    protected List<RoleResponse> roles = new();

    public void Dispose() => Interceptor.DisposeEvent();

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        roles = await RoleService.GetRolesForAdmin();
    }

    /// <summary>
    /// Initialize the component using the parameter.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            User = await UserService.GetUser(Id);
        }
    }

    /// <summary>
    /// Save the user.
    /// </summary>
    protected async Task SaveUser()
    {
        RequestResponse result = new();
        if (User.Id != 0)
        {
            result = await UserService.UpdateUser(User);
        }
        else
        {
            result = await UserService.AddUser(User);
        }
        if (result.Successful)
        {
            Cancel();
        }
    }

    /// <summary>
    /// Cancel the operation.
    /// </summary>
    public void Cancel()
    {
        NavManager.NavigateTo("/admin/users");
    }
}
