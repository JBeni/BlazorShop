@*
  <copyright file="AddEditSubscription.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/admin/Subscriptions/add"
@page "/admin/Subscriptions/edit/{Id:int}"

@attribute [Authorize(Policy = StringRoleResources.Admin)]

@inject ISubscriptionService SubscriptionService
@inject NavigationManager NavManager
@inject HttpInterceptorService Interceptor

@using Variant = MudBlazor.Variant;

<h1>@Title Subscription</h1>
<hr />

<EditForm Model="@Subscription" OnValidSubmit="SaveSubscription">
    <FluentValidationValidator />

    <div class="mb-3">
        <div class="col-md-4">
            <MudTextField class="form-control" InputType="InputType.Text"
                @bind-Value="Subscription.StripeSubscriptionId" Label="StripeSubscriptionId"
                For="@(() => Subscription.StripeSubscriptionId)"
                Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>
    <div class="mb-3">
        <div class="col-md-4">
            <MudTextField class="form-control" InputType="InputType.Text"
                @bind-Value="Subscription.Name" Label="Name"
                For="@(() => Subscription.Name)"
                Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>
    <div class="mb-3">
        <div class="col-md-4">
            <MudTextField class="form-control" InputType="InputType.Number"
                @bind-Value="Subscription.Price" Label="Price"
                For="@(() => Subscription.Price)"
                Min="1"
                Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>
    <div class="mb-3">
        <div class="col-md-4">
            <MudTextField class="form-control" InputType="InputType.Text"
                @bind-Value="Subscription.Options" Label="Options"
                For="@(() => Subscription.Options)"
                Lines="5"
                Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>
    <div class="mb-3">
        <div class="col-md-4">
            <MudTextField class="form-control" InputType="InputType.Text"
                @bind-Value="Subscription.ImageName" Label="ImageName"
                For="@(() => Subscription.ImageName)"
                Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>
    <div class="mb-3">
        <div class="col-md-4">
            <MudTextField class="form-control" InputType="InputType.Text"
                @bind-Value="Subscription.ImagePath" Label="ImagePath"
                For="@(() => Subscription.ImagePath)"
                Variant="Variant.Outlined"></MudTextField>
        </div>
    </div>

    <div class="form-group" style="margin-bottom: 25px;">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" ButtonType="MudBlazor.ButtonType.Submit">
            Save
        </MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" @onclick="Cancel">
            Cancel
        </MudButton>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Add";
    public SubscriptionResponse Subscription = new();

    public void Dispose() => Interceptor.DisposeEvent();

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override void OnInitialized()
    {
        Interceptor.RegisterEvent();
    }

    /// <summary>
    /// Initialize the component using the parameter.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            Subscription = await SubscriptionService.GetSubscription(Id);
        }
    }

    /// <summary>
    /// Save the subscription.
    /// </summary>
    protected async Task SaveSubscription()
    {
        RequestResponse result = new();
        if (Subscription.Id != 0)
        {
            result = await SubscriptionService.UpdateSubscription(Subscription);
        }
        else
        {
            result = await SubscriptionService.AddSubscription(Subscription);
        }
        if (result.Successful)
        {
            Cancel();
        }
    }

    /// <summary>
    /// Cancel.
    /// </summary>
    public void Cancel()
    {
        NavManager.NavigateTo("/admin/subscriptions");
    }
}
