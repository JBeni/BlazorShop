@*
  <copyright file="Index.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/musics"

@attribute [Authorize(Policy = StringRoleResources.Customer)]

@inject AuthenticationStateProvider AuthStateProvider
@inject IMusicService MusicService
@inject ISubscriptionService SubscriptionService
@inject ISubscriberService SubscriberService
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject HttpInterceptorService Interceptor

@using Variant = MudBlazor.Variant;

<h3 class="mb-3">Musics Section</h3>

<div class="row">
    <div class="input-group col">
        <MudTextField InputType="InputType.Text" class="form-control"
            Immediate="true" Variant="Variant.Outlined" Placeholder="Search music by title"
            @bind-Value="SearchString" OnKeyUp="FilterMusics" />
        <div class="input-group-append" style="margin-left: 15px;">
            <button class="btn btn-primary btn-lg" @onclick="ResetSearch">
                <i class="fas fa-times"></i>
                Reset Filter
            </button>
        </div>
    </div>
</div>
<br />

@if (musicsList is null)
{
    <div class="d-flex justify-content-center" style="margin-top: 100px;">
        <h4 style="font-size: 45px;"><em>Loading the data...</em></h4>
    </div>
}
else
{
    @if (musicsList.Count == 0)
    {
        <div class="d-flex justify-content-center" style="margin-top: 150px;">
            <h4 style="font-size: 45px;">No record found</h4>
        </div>
    }
    else
    {
        <div class="container px-4 py-5" id="custom-cards">
            <div class="row border-bottom">
                <h2 class="">Rent Music</h2>
                <h2 class="d-flex flex-row-reverse" style="margin-top: -45px; border: none;">
                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="(() => ModalShow())">
                        @Title Membership
                    </button>
                </h2>
            </div>

            <div class="row row-cols-1 row-cols-lg-3 align-items-stretch g-4 py-5">
                @foreach (var item in musicsList)
                {
                    <div class="col">
                        <div class="card card-cover h-100 overflow-hidden text-white bg-dark rounded-5 shadow-lg" style="background-image: url('images/musics/@item.ImagePath');">
                            <div class="d-flex flex-column h-100 p-5 pb-3 text-white text-shadow-1">
                                <h2 class="pt-5 mt-5 mb-4 display-6 lh-1 fw-bold">@item.Title</h2>
                                <ul class="d-flex list-unstyled mt-auto">
                                    <li class="me-auto">
                                        <img src="https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/06/music-logo-design.jpg" alt="Bootstrap" width="60" height="60" class="rounded-circle border border-white">
                                    </li>
                                    <li class="d-flex align-items-center">
                                        <small>
                                            <button type="button" class="btn btn-sm btn-outline-success" style="border: none; font-size: 25px;"
                                                @onclick="(() => { ViewMusic(item.Id); })">
                                                View Music
                                            </button>
                                        </small>
                                    </li>
                                </ul>
                            </div>
                            @if (MembershipAccess !=0 && MembershipAccess >= item.AccessLevel)
                            {
                                <div class="text-center mb-3">
                                    <audio controls>
                                        <source src="audio/music_audio.mp3" type="audio/ogg" />
                                        <source src="audio/music_audio.mp3" type="audio/mpeg" />
                                        <a href="audio/music_audio.mp3">music</a>
                                    </audio>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (showModal)
        {
            <div class="modal fade show" id="myModal" style="display:block; margin-top: 125px; margin-left: -100px;" aria-modal="true" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content" style="width: 900px;">
                        <div class="modal-header d-flex justify-content-center">
                            <h3 class="modal-title">@Title Music Membership</h3>
                        </div>

                        <div class="modal-body">
                            <h4 class="text-center align-items-center">What type of membership do you want to choose?</h4>

                            <div class="container py-3">
                                <main>
                                    <div class="row row-cols-1 row-cols-md-3 mb-3 text-center">
                                        @foreach (var subscription in subscriptions)
                                        {
                                            <div class="col" style="">
                                                <div class="card mb-4 rounded-3 shadow-sm">
                                                    <div class="card-header py-3">
                                                        <h4 class="my-0 fw-normal">@subscription.Name</h4>
                                                    </div>
                                                    <div class="card-body">
                                                        <h1 class="card-title pricing-card-title">
                                                            <small class="text-muted fw-light">@subscription.CurrencySymbol @subscription.Price/@subscription.ChargeType</small>
                                                        </h1>
                                                        <ul class="list-unstyled mt-3 mb-4">
                                                            @foreach (var item in subscription.Options.Split(","))
                                                            {
                                                                <li>@item</li>                                                                
                                                            }
                                                        </ul>
                                                        <button type="button" class="btn btn-danger" @onclick="(async () => {
                                                            await ActivateMembership(subscription); ModalOk();
                                                        })">@Title @subscription.Name Plan</button>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (MembershipAccess > 0)
                                        {
                                            <div class="col-md-12">
                                                <h4>Your current pricing plan is: @subscriber.SubscriptionName Subscription</h4>
                                            </div>
                                        }
                                    </div>
                                </main>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}

@code {
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk() => showModal = false;

    private int MembershipAccess = 0;
    private string Title = "Activate";

    private SubscriberResponse subscriber = new();
    private List<SubscriptionResponse> subscriptions = new();

    private List<MusicResponse> musicsList { get; set; }
    protected List<MusicResponse> searchMusicsData { get; set; }

    protected string SearchString { get; set; } = string.Empty;
    private int UserId { get; set; }

    public void Dispose() => Interceptor.DisposeEvent();

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!user.Identity.IsAuthenticated) return;
        UserId = int.Parse(user.Claims.FirstOrDefault(x => x.Type == StringRoleResources.UserIdClaim).Value);

        await GetMusics();
        await GetSubscriptions();
        await GetUserSubscriber(UserId);
    }

    /// <summary>
    /// Get the user subscriber.
    /// </summary>
    private async Task GetUserSubscriber(int userId)
    {
        subscriber = await SubscriberService.GetUserSubscriber(userId);
        if (DateTime.Now <= subscriber.CurrentPeriodEnd && subscriber.Id > 0)
        {
            MembershipAccess = subscriber.SubscriptionId;
            Title = "Update";
        }
    }

    /// <summary>
    /// Activate the membership.
    /// </summary>
    private async Task ActivateMembership(SubscriptionResponse subscription)
    {
        var subscriberObj = new SubscriberResponse
        {
            DateStart = DateTime.Now,
            CurrentPeriodEnd = DateTime.Now.AddDays(30),
            CustomerId = UserId,
            SubscriptionId = subscription.Id,
            StripeSubscriptionId = subscription.StripeSubscriptionId
        };
        await SubscriberService.AddSubscriber(subscriberObj);

        if (MembershipAccess == 0)
        {
            var response = await HttpClient.PostAsJsonAsync("Payments/create-subscription", subscriberObj);
            var subscriptionCheckoutUrl = await response.Content.ReadAsStringAsync();
            NavManager.NavigateTo(subscriptionCheckoutUrl, forceLoad: true);
        }
        else
        {
            subscriberObj.Id = 1;
            subscriberObj.StripeSubscriberSubscriptionId = subscriber.StripeSubscriberSubscriptionId;

            var response = await HttpClient.PostAsJsonAsync("Payments/update-subscription", subscriberObj);
            var subscriptionCheckoutUrl = await response.Content.ReadAsStringAsync();
            NavManager.NavigateTo(subscriptionCheckoutUrl, forceLoad: true);
        }
    }

    /// <summary>
    /// View the music details.
    /// </summary>
    private void ViewMusic(int id)
    {
        NavManager.NavigateTo($"musics/view/{id}");
    }

    /// <summary>
    /// Get the musics.
    /// </summary>
    protected async Task GetMusics()
    {
        musicsList = await MusicService.GetMusics();
        searchMusicsData = musicsList;
    }

    /// <summary>
    /// Get the subscriptions.
    /// </summary>
    protected async Task GetSubscriptions()
    {
        subscriptions = await SubscriptionService.GetSubscriptions();
    }

    /// <summary>
    /// Filter the musics.
    /// </summary>
    protected void FilterMusics()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            musicsList = searchMusicsData.Where(x => x.Title.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            musicsList = searchMusicsData;
        }
    }

    /// <summary>
    /// Reset the search filter.
    /// </summary>
    public void ResetSearch()
    {
        SearchString = string.Empty;
        musicsList = searchMusicsData;
    }
}
