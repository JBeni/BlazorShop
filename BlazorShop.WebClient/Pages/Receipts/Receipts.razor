@*
  <copyright file="Receipts.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/receipts"

@attribute [Authorize(Policy = StringRoleResources.Customer)]

@inject AuthenticationStateProvider AuthStateProvider
@inject IReceiptService ReceiptService
@inject HttpInterceptorService Interceptor

@using Variant = MudBlazor.Variant;

<main class="container">
    <div class="d-flex align-items-center p-3 my-3 text-white bg-purple shadow-lg p-3 bg-white rounded">
        <img class="me-3" src="images/receipts.png" alt="Receipts" width="100" height="100">
        <div class="lh-1">
            <h1 class="display-3 font-weight-bold mb-0 text-primary" style="margin-left: 30px;">My Receipts</h1>
        </div>
    </div>

    <div class="row">
        <div class="input-group col shadow-lg p-3 bg-white rounded mb-5">
            <MudTextField InputType="InputType.Text" class="form-control"
                Immediate="true" Variant="Variant.Outlined" Placeholder="Search receipt by name"
                @bind-Value="SearchString" OnKeyUp="FilterReceipts" />
            <div class="input-group-append" style="margin-left: 15px;">
                <button class="btn btn-primary btn-lg" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                    Reset Filter
                </button>
            </div>
        </div>
    </div>

    @if (receiptsList is null)
    {
        <div class="d-flex justify-content-center" style="margin-top: 100px;">
            <h4 style="font-size: 45px;"><em>Loading the data...</em></h4>
        </div>
    }
    else
    {
        @if (receiptsList.Count > 0)
        {
            @foreach (var receipt in receiptsList)
            {
                <div class="container col-xxl-12 shadow-lg p-3 bg-white rounded mb-3">
                    <div class="row flex-lg-row align-items-center">
                        <div class="col-md-3">
                            <img src="images/receipt.png" class="d-block img-fluid" alt="Receipt Image" width="80" height="80" loading="lazy">
                        </div>

                        <div class="col-md-6" style="margin-left: -90px;">
                            <h5 class="display-8 fw-bold lh-1 mb-3">@receipt.ReceiptName</h5>
                            <div class="col-md-10">
                                <p class="lead">@receipt.ReceiptDate.ToString("dd/MM/yyyy HH:mm tt")</p>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="border-0 d-flex flex-row-reverse mt-3">
                                <a href="@receipt.ReceiptUrl" target="_blank" class="btn btn-primary btn-lg" role="button">
                                    View Receipt
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="container col-xxl-12 shadow-lg p-3 bg-white rounded mb-3">
                <div class="row flex-lg-row align-items-center">
                    <div class="text-center">
                        <h4 class="display-6 fw-bold lh-1 mb-3">No record found...</h4>
                    </div>
                </div>
            </div>
        }
    }
</main>

@code {
    private List<ReceiptResponse> receiptsList { get; set; }
    protected List<ReceiptResponse> searchReceiptsData { get; set; }

    protected string SearchString { get; set; } = string.Empty;
    private string userEmail { get; set; }

    public void Dispose() => Interceptor.DisposeEvent();

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!user.Identity.IsAuthenticated) return;
        userEmail = user.Claims.FirstOrDefault(x => x.Type == StringRoleResources.EmailClaim).Value;

        await GetReceipts(userEmail);
    }

    /// <summary>
    /// Get the receipts.
    /// </summary>
    public async Task GetReceipts(string userEmail)
    {
        receiptsList = await ReceiptService.GetReceipts(userEmail);
        searchReceiptsData = receiptsList;
    }

    /// <summary>
    /// Filter the receipts.
    /// </summary>
    protected void FilterReceipts()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            receiptsList = searchReceiptsData.Where(x => x.ReceiptName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            receiptsList = searchReceiptsData;
        }
    }

    /// <summary>
    /// Reset the search filter.
    /// </summary>
    public void ResetSearch()
    {
        SearchString = string.Empty;
        receiptsList = searchReceiptsData;
    }
}
