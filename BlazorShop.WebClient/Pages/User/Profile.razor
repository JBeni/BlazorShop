@*
  <copyright file="Profile.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/profile"

@attribute [Authorize]

@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@inject IAccountService AccountService
@inject HttpInterceptorService Interceptor

<h1>User Profile</h1>

<div class="container rounded bg-white">
    <div class="row">
        <div class="col-md-2 border-right ml-2 mt-3">
            <div class="d-flex flex-column align-items-center text-center p-3 p-5">
                <img class="rounded-circle" width="150px" src="images/user-profile.png">
                <span class="font-weight-bold" style="margin-top: 10px;">@userData.Username</span>
            </div>
        </div>
        <div class="col-md-3 border-right">
            <div class="d-flex flex-column p-3 py-5" style="margin-top: 55px; margin-left: 50px;">
                <p class="font-weight-bold">FirstName : @userData.FirstName</p>
                <p class="font-weight-bold">LastName : @userData.LastName</p>
                <p class="font-weight-bold">Email : @userData.Email</p>
                <span></span>
            </div>
        </div>
        <div class="col-md-3 border-right" style="margin-left: 50px; border: 5px dashed red;">
             <h4 class="text-right text-danger">DANGER ZONE</h4>
            <div class="d-flex flex-column p-3 py-5" style="margin-top: 55px; margin-left: 50px;">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <button class="btn btn-danger" @onclick="(() => { ModalShow(); })">
                        Change Email
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-5 border-right">
            <div class="p-3 py-5">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="text-right">Profile Settings</h4>
                </div>
                <EditForm Model="@userData" OnValidSubmit="UpdateUser">
                    <FluentValidationValidator />

                    <div class="row mt-3">
                        <div class="mb-3">
                            <label for="FirstName" class="form-label">FirstName</label>
                            <div class="col-md-12">
                                <InputText class="form-control form-control-lg" type="text" placeholder="First Name" @bind-Value="userData.FirstName" />
                            </div>
                            @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("firstname")))
                            {
                                <div class="mt-1 alert alert-danger" role="alert">
                                    <ValidationMessage For="@(() => userData.FirstName)" />
                                </div>
                            }
                        </div>
                        <div class="mb-3">
                            <label for="LastName" class="form-label">LastName</label>
                            <div class="col-md-12">
                                <InputText class="form-control form-control-lg" type="text" placeholder="Last Name" @bind-Value="userData.LastName" />
                            </div>
                            @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("lastname")))
                            {
                                <div class="mt-1 alert alert-danger" role="alert">
                                    <ValidationMessage For="@(() => userData.LastName)" />
                                </div>
                            }
                        </div>
                        <div class="mb-3">
                            <label for="Email" class="form-label">Email</label>
                            <div class="col-md-12">
                                <InputText class="form-control form-control-lg" type="email" placeholder="Email" Disabled="true" @bind-Value="userData.Email" />
                            </div>
                            @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("email")))
                            {
                                <div class="mt-1 alert alert-danger" role="alert">
                                    <ValidationMessage For="@(() => userData.Email)" />
                                </div>
                            }
                        </div>
                    </div>
                    <div class="text-center">
                        <button class="btn btn-primary profile-button" type="submit">Save Changes</button>
                    </div>
                </EditForm>
            </div>
        </div>

        <div class="col-md-4" style="margin-left: 35px; margin-top: -10px;">
            <div class="p-3 py-5">
                <div class="d-flex justify-content-between align-items-center">
                    <h4 class="text-right">Change Password</h4>
                </div>
                <br/>
                <EditForm Model="@changePassword" OnValidSubmit="ChangePassword">
                    <FluentValidationValidator />

                    <div class="mb-3">
                        <label for="OldPassword" class="form-label">Old Password</label>
                        <div class="col-md-12">
                            <InputText class="form-control form-control-lg" type="password" placeholder="Password" @bind-Value="changePassword.OldPassword" />
                        </div>
                        @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("oldpassword")))
                        {
                            <div class="mt-1 alert alert-danger" role="alert">
                                <ValidationMessage For="@(() => changePassword.OldPassword)" />
                            </div>
                        }
                    </div>
                    <div class="mb-3">
                        <label for="NewPassword" class="form-label">New Password</label>
                        <div class="col-md-12">
                            <InputText class="form-control form-control-lg" type="password" placeholder="Password" @bind-Value="changePassword.NewPassword" />
                        </div>
                        @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("newpassword") && !x.ToLower().Contains("confirmnewpassword")))
                        {
                            <div class="mt-1 alert alert-danger" role="alert">
                                <ValidationMessage For="@(() => changePassword.NewPassword)" />
                            </div>
                        }
                    </div>
                    <div class="mb-3">
                        <label for="ConfirmNewPassword" class="form-label">Confirm New Password</label>
                        <div class="col-md-12">
                            <InputText class="form-control form-control-lg" type="password" placeholder="Confirm Password" @bind-Value="changePassword.ConfirmNewPassword" />
                        </div>
                        @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("confirmnewpassword")))
                        {
                            <div class="mt-1 alert alert-danger" role="alert">
                                <ValidationMessage For="@(() => changePassword.ConfirmNewPassword)" />
                            </div>
                        }
                    </div>
                    <div class="text-center">
                        <button class="btn btn-primary profile-button" type="submit">Change Password</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal fade show" id="myModal" style="display:block; margin-top: 150px;" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Update Email</h3>
                </div>
                <EditForm Model="@updateEmail" OnValidSubmit="UpdateUserEmail">
                    <FluentValidationValidator />

                    <div class="mb-3" style="margin-left: 15px;">
                        <label for="Email" class="form-label">Old Email</label>
                        <div class="col-md-10">
                            <InputText class="form-control form-control-lg" type="email" placeholder="Email" @bind-Value="updateEmail.Email" />
                        </div>
                        @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("email") && !x.ToLower().Contains("newemail")))
                        {
                            <div class="mt-1 alert alert-danger" role="alert">
                                <ValidationMessage For="@(() => updateEmail.Email)" />
                            </div>
                        }
                   </div>
                    <div class="mb-3" style="margin-left: 15px;">
                        <label for="NewEmail" class="form-label">New Email</label>
                        <div class="col-md-10">
                            <InputText class="form-control form-control-lg" type="email" placeholder="New Email" @bind-Value="updateEmail.NewEmail" />
                        </div>
                        @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("newemail")))
                        {
                            <div class="mt-1 alert alert-danger" role="alert">
                                <ValidationMessage For="@(() => updateEmail.NewEmail)" />
                            </div>
                        }
                    </div>
                </EditForm>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">
                        Update Email
                    </button>
                    <button type="button" class="btn btn-light" @onclick="@ModalCancel">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    bool showModal = false;
    private int UserId = 0;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;

    protected UserResponse userData = new();
    protected ChangePasswordCommand changePassword = new();
    protected UpdateUserEmailCommand updateEmail = new();

    public void Dispose() => Interceptor.DisposeEvent();

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!user.Identity.IsAuthenticated) return;
        UserId = int.Parse(user.Claims.FirstOrDefault(x => x.Type == StringRoleResources.UserIdClaim).Value);

        userData = await UserService.GetUser(UserId);
    }

    /// <summary>
    /// Updating the user email.
    /// </summary>
    private async Task UpdateUserEmail()
    {
        showModal = true;

        updateEmail.UserId = UserId;
        var result = await UserService.UpdateUserEmail(updateEmail);
        if (result.Successful)
        {
            updateEmail = new();
            showModal = false;
        }
    }

    /// <summary>
    /// Updating the user.
    /// </summary>
    private async Task UpdateUser()
    {
        if (userData.Id != 0)
        {
            await UserService.UpdateUser(userData);
        }
    }

    /// <summary>
    /// Changing the user password.
    /// </summary>
    private async Task ChangePassword()
    {
        if (
            changePassword.OldPassword.Length > 6 &&
            changePassword.NewPassword.Length > 6 &&
            changePassword.NewPassword.Equals(changePassword.ConfirmNewPassword)
            )
        {
            changePassword.UserId = UserId;
            await AccountService.ChangePassword(changePassword);
            changePassword = new();
        }
    }
}
