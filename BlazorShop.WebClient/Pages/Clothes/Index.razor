@*
  <copyright file="Index.razor" company="Beniamin Jitca">
   Copyright (c) Beniamin Jitca. All rights reserved.
  </copyright>
*@

@page "/clothes"

@attribute [Authorize(Policy = StringRoleResources.Customer)]

@inject AuthenticationStateProvider AuthStateProvider
@inject IClotheService ClotheService
@inject ICartService CartService
@inject HttpInterceptorService Interceptor

@using Variant = MudBlazor.Variant;

<h3>Clothes Shop</h3>

<div class="row">
    <div class="input-group col">
        <MudTextField InputType="InputType.Text" class="form-control"
            Immediate="true" Variant="Variant.Outlined" Placeholder="Search clothe by name"
            @bind-Value="SearchString" OnKeyUp="FilterClothes" />
        <div class="input-group-append" style="margin-left: 15px;">
            <button class="btn btn-primary btn-lg" @onclick="ResetSearch">
                <i class="fas fa-times"></i>
                Reset Filter
            </button>
        </div>
    </div>
</div>
<br />

@if (clothesList is null)
{
    <div class="d-flex justify-content-center" style="margin-top: 100px;">
        <h4 style="font-size: 45px;"><em>Loading the data...</em></h4>
    </div>
}
else
{
    @if (clothesList.Count == 0)
    {
        <div class="d-flex justify-content-center" style="margin-top: 150px;">
            <h4 style="font-size: 45px;">No record found</h4>
        </div>
    }
    else
    {
        <div class="album py-5">
            <div class="container">
                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                    @foreach (var clothe in clothesList)
                    {
                        <div class="col">
                            <div class="card shadow-sm">
                                <img src="images/clothes/@clothe.ImagePath" style="height: 350px;" class="img-fluid" alt="@clothe.ImageName" />
                                <div class="card-body">
                                    <p class="card-text name">@clothe.Name</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                                @onclick="(async () => { await AddToCart(clothe); })">
                                                Add To Cart
                                            </button>
                                            <span style="margin-left: 15px;"></span>
                                            <a href='clothes/view/@clothe.Id' class="btn btn-outline-dark" role="button">
                                                View Product
                                            </a>
                                        </div>
                                    <small class="text-muted price">$ @clothe.Price</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    protected List<ClotheResponse> clothesList { get; set; }
    protected List<ClotheResponse> searchClothesData  { get; set; }

    protected string SearchString { get; set; } = string.Empty;
    private int UserId { get; set; }

    public void Dispose() => Interceptor.DisposeEvent();

    /// <summary>
    /// Initialize the component on load.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        clothesList = new List<ClotheResponse>();
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!user.Identity.IsAuthenticated) return;
        UserId = int.Parse(user.Claims.FirstOrDefault(x => x.Type == StringRoleResources.UserIdClaim).Value);

        await GetClothes();
    }

    /// <summary>
    /// Get the clothes.
    /// </summary>
    protected async Task GetClothes()
    {
        clothesList = await ClotheService.GetClothes();
        searchClothesData = clothesList;
    }

    /// <summary>
    /// Add item to cart.
    /// </summary>
    private async Task AddToCart(ClotheResponse clothe)
    {
        CartResponse cartItem = new();

        cartItem.Name = clothe.Name;
        cartItem.Price = clothe.Price;
        cartItem.Amount = 1;
        cartItem.ClotheId = clothe.Id;
        cartItem.UserId = UserId;

        await CartService.AddCart(cartItem);
    }

    /// <summary>
    /// Filter the clothes.
    /// </summary>
    protected void FilterClothes()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            clothesList = searchClothesData.Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            clothesList = searchClothesData;
        }
    }

    /// <summary>
    /// Reset the search filter.
    /// </summary>
    public void ResetSearch()
    {
        SearchString = string.Empty;
        clothesList = searchClothesData;
    }
}

<style>
    .container {
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 50px;
        font-family: "roboto", sans-serif;
    }

    .name {
        font-family: "dosis";
        font-size: 30px;
        text-transform: capitalize;
    }

    .price {
        font-size: 20px;
        font-weight: 100;
        margin-bottom: 1px;
    }

    .btn {
        background: #eae3d2;
        color: #292929;
        border: none;
        text-transform: capitalize;
        font-size: 16px;
        padding: 10px 20px;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #eedbaf;
    }
</style>
